*matrix means matrix is transposed but we cannot access it directly 
if i want to go thru columns i do 
for row in matrix:
    row[0]=..  ill go thru all elements in first column

for i in matrix[0]:
    for row in matrix:
        print(row[i])

ill got thru column wise each column at a time

matrix=[[1,2,3],[4,5,6],[7,8,9]]
columns = list(zip(*matrix))
above line gives output as list of tuples where each tuple is a column
print(columns) #[(1, 4, 7), (2, 5, 8), (3, 6, 9)]

 array in Python,
Using List Comprehension (Most Common):
Declare the number of rows and columns, e.g., rows = 3 and cols = 4.
Use the syntax: matrix = [[0] * cols for _ in range(rows)].
This creates a 3x4 matrix filled with zeros.
It ensures that each row is a distinct list, avoiding reference issues.

Using Nested Loops (Explicit Initialization):
Initialize an empty list for the matrix.
Loop through the number of rows, appending a list of size cols filled with zeros for each iteration.
This approach is more explicit but functionally equivalent to list comprehension.

Using numpy (Optional, for Advanced Use Cases):
Import numpy using import numpy as np.
Use np.zeros((3, 4), dtype=int) to create a 3x4 matrix filled with zeros.
This is efficient for numerical tasks but requires importing a library.

Common Pitfall to Avoid:

If you use matrix = [[0] * cols] * rows, Python creates shallow copies of the same row.
Modifying one row will also modify all the others, which may lead to unexpected behavior.


